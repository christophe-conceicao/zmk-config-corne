/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/outputs.h>

/*
 * Corne 6-columns (42 keys) Key Matrix
 * ------------------------------------
 *      ╭────────────────────────┬────────────────────────╮
 *      │  0   1   2   3   4   5 │  6   7   8   9  10  11 │
 *      │ 12  13  14  15  16  17 │ 18  19  20  21  22  23 │
 *      │ 24  25  26  27  28  29 │ 30  31  32  33  34  35 │
 *      ╰───────────╮ 36  37  38 │ 39  40  41 ╭───────────╯
 *                  ╰────────────┴────────────╯
 */

/ {
        combos {
                compatible = "zmk,combos";
                combo_bslh {
                        timeout-ms = <50>;
                        key-positions = <16 29>;
                        bindings = <&kp BSLH>;
                };
                combo_fslh {
                        timeout-ms = <50>;
                        key-positions = <19 30>;
                        bindings = <&kp FSLH>;
                };
                combo_prcnt {
                        timeout-ms = <50>;
                        key-positions = <20 31>;
                        bindings = <&kp PRCNT>;
                };
                combo_caret {
                        timeout-ms = <50>;
                        key-positions = <18 07 20>;
                        bindings = <&kp CARET>;
                };
                combo_equal {
                        timeout-ms = <50>;
                        key-positions = <06 07>;
                        bindings = <&kp EQUAL>;
                };
                combo_minus {
                        timeout-ms = <50>;
                        key-positions = <18 19>;
                        bindings = <&kp MINUS>;
                };
                combo_plus {
                        timeout-ms = <50>;
                        key-positions = <18 19 20>;
                        bindings = <&kp PLUS>;
                };
                combo_astrk {
                        timeout-ms = <50>;
                        key-positions = <30 31 32>;
                        bindings = <&kp ASTRK>;
                };
                combo_under {
                        timeout-ms = <50>;
                        key-positions = <30 31>;
                        bindings = <&kp UNDER>;
                };
                combo_tilde {
                        timeout-ms = <50>;
                        key-positions = <16 17>;
                        bindings = <&kp TILDE>;
                };
                combo_grave {
                        timeout-ms = <50>;
                        key-positions = <04 17>;
                        bindings = <&kp GRAVE>;
                };
                combo_pipe {
                        timeout-ms = <50>;
                        key-positions = <18 30>;
                        bindings = <&kp PIPE>;
                };
                combo_amps {
                        timeout-ms = <50>;
                        key-positions = <19 31>;
                        bindings = <&kp AMPS>;
                };
                combo_excl {
                        timeout-ms = <50>;
                        key-positions = <20 32>;
                        bindings = <&kp EXCL>;
                };
                combo_lpar {
                        timeout-ms = <50>;
                        key-positions = <05 17>;
                        bindings = <&kp LPAR>;
                };
                combo_rpar {
                        timeout-ms = <50>;
                        key-positions = <06 18>;
                        bindings = <&kp RPAR>;
                };
                combo_lbkt {
                        timeout-ms = <50>;
                        key-positions = <04 16>;
                        bindings = <&kp LBKT>;
                };
                combo_rbkt {
                        timeout-ms = <50>;
                        key-positions = <07 19>;
                        bindings = <&kp RBKT>;
                };
                combo_lbrc {
                        timeout-ms = <50>;
                        key-positions = <03 15>;
                        bindings = <&kp LBRC>;
                };
                combo_wth {
                        timeout-ms = <50>;
                        key-positions = <08 22>;
                        bindings = <&kp H>;
                };
                combo_at {
                        timeout-ms = <50>;
                        key-positions = <13 05>;
                        bindings = <&kp AT>;
                };
                combo_hash {
                        timeout-ms = <50>;
                        key-positions = <13 14>;
                        bindings = <&kp HASH>;
                };
        };
        keymap {
                compatible = "zmk,keymap";

                default_layer {
// -----------------------------------------------------------------------------------------
// |  TAB |  Q  |  W  |  E  |  R      |  T  |   |  Y  |  U      |  I  |  O  |  P  | BSPC |
// | CTRL |  A  |  S  |  D  |  F (LS) |  G  |   |  H  |  J (RS) |  K  |  L  |  ;  |  '   |
// | SHFT |  Z  |  X  |  C  |  V      |  B  |   |  N  |  M      |  ,  |  .  |  /  | ESC  |
//                    | GUI | LWR     | SPC |   | ENT | RSE     | ALT |
                        bindings = <
   &kp TAB   &kp Q &kp W &kp E &kp R        &kp T   &kp Y &kp U         &kp I     &kp O   &kp P    &kp BSPC
   &kp LCTRL &kp A &kp S &kp D &mt LSHIFT F &kp G   &kp H &mt RSHIFT J  &kp K     &kp L   &kp SEMI &kp SQT
   &kp LSHFT &kp Z &kp X &kp C &kp V        &kp B   &kp N &kp M         &kp COMMA &kp DOT &kp FSLH &kp ESC
                  &kp LGUI &mo 1 &kp SPACE   &kp RET &mo 2 &kp RALT
                        >;
                };
                lower_layer {
// -----------------------------------------------------------------------------------------
// |  TAB |  1  |  2  |  3  |  4  |  5  |   |  6  |  7  |  8  |  9  |  0  | BSPC |
// | BTCLR| BT1 | BT2 | BT3 | BT4 | BT5 |   | LFT | DWN |  UP | RGT |     |      |
// | SHFT | USB | BLE | TOG |     |     |   |     |     |     |     |     |      |
//                    | GUI |     | SPC |   | ENT |     | ALT |
                        bindings = <
   &kp TAB    &kp N1       &kp N2       &kp N3        &kp N4       &kp N5         &kp N6   &kp N7    &kp N8    &kp N9    &kp N0       &kp BSPC
   &bt BT_CLR &bt BT_SEL 0 &bt BT_SEL 1 &bt BT_SEL 2  &bt BT_SEL 3 &bt BT_SEL 4   &kp LEFT &kp DOWN  &kp UP    &kp RIGHT &kp LG(LEFT) &kp LG(RIGHT)
   &kp LSHFT  &out OUT_USB &out OUT_BLE &out OUT_TOG  &trans       &trans         &trans   &kp PG_DN &kp PG_UP &trans    &kp LG(UP)   &kp LG(DOWN)
                                    &kp LGUI     &trans            &kp SPACE      &kp RET  &trans   &kp RALT
                        >;
                };

                raise_layer {
// -----------------------------------------------------------------------------------------
// |  TAB |  !  |  @  |  #  |  $  |  %  |   |  ^  |  &  |  *  |  (  |  )  | BSPC |
// | CTRL |     |     |     |     |     |   |  -  |  =  |  [  |  ]  |  \  |  `   |
// | SHFT |     |     |     |     |     |   |  _  |  +  |  {  |  }  | "|" |  ~   |
//                    | GUI |     | SPC |   | ENT |     | ALT |
                        bindings = <
   &kp  TAB  &kp EXCL &kp AT &kp HASH &kp DLLR &kp PRCNT   &kp CARET &kp AMPS  &kp ASTRK &kp LPAR &kp RPAR &kp BSPC
   &kp LCTRL &trans   &trans &trans   &trans   &trans      &kp MINUS &kp EQUAL &kp LBKT  &kp RBKT &kp BSLH &kp GRAVE
   &kp LSHFT &trans   &trans &trans   &trans   &trans      &kp UNDER &kp PLUS  &kp LBRC  &kp RBRC &kp PIPE &kp TILDE
                             &kp LGUI &trans   &kp SPACE   &kp RET   &trans    &kp RALT
                        >;
                };
        };
};
